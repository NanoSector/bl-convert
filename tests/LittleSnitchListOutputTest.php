<?php

namespace Yoshi2889\BlConvert\Tests;

use PHPUnit\Framework\TestCase;
use Yoshi2889\BlConvert\Exceptions\ListSizeException;
use Yoshi2889\BlConvert\ListTypes\HostnameList;
use Yoshi2889\BlConvert\OutputStrategies\LittleSnitchListOutput;

class LittleSnitchListOutputTest extends TestCase
{

    public function testWriteList()
    {
        $output = new LittleSnitchListOutput(__DIR__ . '/littlesnitch.lsrules', 'Little Snitch Test List');

        $list = new HostnameList(['test.com', 'foo.bar']);

        $output->writeList($list);

        $this->assertFileExists(__DIR__ . '/littlesnitch.lsrules');

        $expected = [
            'name' => 'Little Snitch Test List',
            'description' => 'Generated by https://github.com/Yoshi2889/bl-convert',
            'denied-remote-hosts' => ['test.com', 'foo.bar']
        ];

        $this->assertEquals($expected, json_decode(file_get_contents(__DIR__ . '/littlesnitch.lsrules'), true));
    }

    public function testWriteListTooLarge() {
        $items = explode(' ', trim(str_repeat('test.com ', 200010)));
        $list = new HostnameList($items);

        $output = new LittleSnitchListOutput(__DIR__ . '/littlesnitch.lsrules', 'Little Snitch Test List');

        $this->expectException(ListSizeException::class);
        $output->writeList($list);
    }

    public function testWriteListNoBlocklistFormat()
    {
        $output = new LittleSnitchListOutput(__DIR__ . '/littlesnitch.lsrules', 'Little Snitch Test List', false);

        $list = new HostnameList(['test.com', 'foo.bar']);

        $output->writeList($list);

        $this->assertFileExists(__DIR__ . '/littlesnitch.lsrules');

        $expected = [
            'name' => 'Little Snitch Test List',
            'description' => 'Generated by https://github.com/Yoshi2889/bl-convert',
            'rules' => [
                [
                    'action' => 'deny',
                    'process' => 'any',
                    'remote-hosts' => 'test.com'
                ],
                [
                    'action' => 'deny',
                    'process' => 'any',
                    'remote-hosts' => 'foo.bar'
                ]
            ]
        ];

        $this->assertEquals($expected, json_decode(file_get_contents(__DIR__ . '/littlesnitch.lsrules'), true));
    }

    public function tearDown()
    {
        if (!file_exists(__DIR__ . '/littlesnitch.lsrules')) {
            return;
        }
        unlink(__DIR__ . '/littlesnitch.lsrules');
    }
}
